pack "betterworldedit" "Generated by MDL CLI" 82;
namespace "betterworldedit";

// =============================
// Variables
// =============================

// Selection state per-player
var num bwe_pos1_x<@a> = 0;
var num bwe_pos1_y<@a> = 0;
var num bwe_pos1_z<@a> = 0;
var num bwe_pos2_x<@a> = 0;
var num bwe_pos2_y<@a> = 0;
var num bwe_pos2_z<@a> = 0;
var num bwe_pos1_set<@a> = 0;
var num bwe_pos2_set<@a> = 0;

// Derived bounds/dimensions per-player
var num bwe_min_x<@a> = 0;
var num bwe_min_y<@a> = 0;
var num bwe_min_z<@a> = 0;
var num bwe_max_x<@a> = 0;
var num bwe_max_y<@a> = 0;
var num bwe_max_z<@a> = 0;
var num bwe_dim_x<@a> = 0;
var num bwe_dim_y<@a> = 0;
var num bwe_dim_z<@a> = 0;
var num bwe_volume<@a> = 0;

// Config per-player
var num bwe_max_fill<@a> = 30000; // safe default under vanilla fill cap

// Scratch variables (per-player) used in helpers/loops
var num _slice_h<@a> = 0;
var num _base<@a> = 0;
var num _slices<@a> = 0;
var num _y_start<@a> = 0;
var num _y_end<@a> = 0;
var num _xs<@a> = 0;
var num _xe<@a> = 0;
var num _zs<@a> = 0;
var num _ze<@a> = 0;
var num _tile_x<@a> = 0;
var num _tile_z<@a> = 0;
var num _area_limit<@a> = 0;
var num _temp<@a> = 0;
var num _ix<@a> = 0;
var num _iy<@a> = 0;
var num _iz<@a> = 0;
var num _fill_active<@a> = 0;

// Selector item usage tracking (two-tool system via custom_data: bwe_selector_1 / bwe_selector_2)
var num bwe_stat_selector<@a> = 0;      // current brush use stat (mirrors objective)
var num bwe_stat_selector_2<@a> = 0;    // mirror for clarity/debug (same value as above)
var num bwe_stat_prev_1<@a> = 0;        // last seen stat when using Pos1 tool
var num bwe_stat_prev_2<@a> = 0;        // last seen stat when using Pos2 tool

// =============================
// Main / Init
// =============================

function betterworldedit:main {
    $!raw
    tellraw @s [{"text":"BetterWorldEdit","bold":true,"color":"aqua"},{"text":" - Commands","color":"gray"}]
    tellraw @s [{"text":" • ","color":"dark_gray"},{"text":"/function betterworldedit:pos1","color":"gold"},{"text":" - set position 1 (your current block)","color":"yellow"}]
    tellraw @s [{"text":" • ","color":"dark_gray"},{"text":"/function betterworldedit:pos2","color":"gold"},{"text":" - set position 2 (your current block)","color":"yellow"}]
    tellraw @s [{"text":" • ","color":"dark_gray"},{"text":"/function betterworldedit:info","color":"gold"},{"text":" - show selection info","color":"yellow"}]
    tellraw @s [{"text":" • ","color":"dark_gray"},{"text":"/function betterworldedit:fill_block","color":"gold"},{"text":" - fill selection with a block (chunked)","color":"yellow"}]
    tellraw @s [{"text":" • ","color":"dark_gray"},{"text":"/function betterworldedit:give_selector","color":"gold"},{"text":" - get selector tools (pos1 & pos2)","color":"yellow"}]
    tellraw @s [{"text":" • ","color":"dark_gray"},{"text":"/function betterworldedit:fill_selection ","color":"gold"},{"text":"{block:\"minecraft:oak_planks\"}","color":"aqua"},{"text":" - fill with any block","color":"yellow"}]
    tellraw @s [{"text":" • ","color":"dark_gray"},{"text":"/function betterworldedit:set_max_fill ","color":"gold"},{"text":"{value:30000}","color":"aqua"},{"text":" - set max blocks per sub-fill","color":"yellow"}]
    tellraw @s [{"text":"Global config:","color":"gray"},{"text":" armor stand tag ","color":"dark_gray"},{"text":"bwe_global_config","color":"aqua"},{"text":" controls max per op.","color":"gray"}]
    raw!$
}

function betterworldedit:init {
    say "BetterWorldEdit initialized. Run /function betterworldedit:main";
    // Scoreboard objectives
    $!raw
    scoreboard objectives add bwe_use_selector minecraft.used:minecraft.brush

    scoreboard objectives add bwe_pos1_x dummy
    scoreboard objectives add bwe_pos1_y dummy
    scoreboard objectives add bwe_pos1_z dummy
    scoreboard objectives add bwe_pos2_x dummy
    scoreboard objectives add bwe_pos2_y dummy
    scoreboard objectives add bwe_pos2_z dummy
    scoreboard objectives add bwe_pos1_set dummy
    scoreboard objectives add bwe_pos2_set dummy

    scoreboard objectives add bwe_min_x dummy
    scoreboard objectives add bwe_min_y dummy
    scoreboard objectives add bwe_min_z dummy
    scoreboard objectives add bwe_max_x dummy
    scoreboard objectives add bwe_max_y dummy
    scoreboard objectives add bwe_max_z dummy
    scoreboard objectives add bwe_dim_x dummy
    scoreboard objectives add bwe_dim_y dummy
    scoreboard objectives add bwe_dim_z dummy
    scoreboard objectives add bwe_volume dummy

    scoreboard objectives add bwe_max_fill dummy

    scoreboard objectives add _slice_h dummy
    scoreboard objectives add _base dummy
    scoreboard objectives add _slices dummy
    scoreboard objectives add _y_start dummy
    scoreboard objectives add _y_end dummy
    scoreboard objectives add _xs dummy
    scoreboard objectives add _xe dummy
    scoreboard objectives add _zs dummy
    scoreboard objectives add _ze dummy
    scoreboard objectives add _tile_x dummy
    scoreboard objectives add _tile_z dummy
    scoreboard objectives add _area_limit dummy
    scoreboard objectives add _temp dummy
    scoreboard objectives add _ix dummy
    scoreboard objectives add _iy dummy
    scoreboard objectives add _iz dummy
    scoreboard objectives add _fill_active dummy

    scoreboard objectives add bwe_stat_selector dummy
    scoreboard objectives add bwe_stat_selector_2 dummy
    scoreboard objectives add bwe_stat_prev_1 dummy
    scoreboard objectives add bwe_stat_prev_2 dummy
    raw!$
}

// Run on load
on_load betterworldedit:init;

function betterworldedit:_ensure_global_config {
    $!raw
    # Ensure a single invulnerable, no-gravity armor stand exists with config scores
    execute unless entity @e[type=armor_stand,tag=bwe_global_config,limit=1] run summon armor_stand ~ ~ ~ {NoGravity:1b,Invulnerable:1b,Invisible:1b,Tags:["bwe_global_config"]}

    # Ensure the objective exists for global max fill
    scoreboard objectives add bwe_max_fill dummy

    # Initialize default if missing
    scoreboard players add @e[type=armor_stand,tag=bwe_global_config] bwe_max_fill 0
    execute unless score @e[type=armor_stand,tag=bwe_global_config,limit=1] bwe_max_fill matches 1.. run scoreboard players set @e[type=armor_stand,tag=bwe_global_config,limit=1] bwe_max_fill 30000
    raw!$
}

// =============================
// Position capture helpers
// =============================

function betterworldedit:pos1 {
    // Capture player's current block coordinates into pos1
    $!raw
    execute store result score @s bwe_pos1_x run data get entity @s Pos[0] 1
    execute store result score @s bwe_pos1_y run data get entity @s Pos[1] 1
    execute store result score @s bwe_pos1_z run data get entity @s Pos[2] 1
    # Off-by-one fix: if feet are in air, choose block below
    execute if block ~ ~ ~ #minecraft:air run scoreboard players remove @s bwe_pos1_y 1
    raw!$
    bwe_pos1_set<@s> = 1;
    $!raw
    tellraw @s [{"text":"Pos1 set ","color":"green"},{"text":"(","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_pos1_x"},"color":"aqua"},{"text":", ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_pos1_y"},"color":"aqua"},{"text":", ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_pos1_z"},"color":"aqua"},{"text":")","color":"dark_gray"}]
    raw!$
}

function betterworldedit:pos2 {
    // Capture player's current block coordinates into pos2
    $!raw
    execute store result score @s bwe_pos2_x run data get entity @s Pos[0] 1
    execute store result score @s bwe_pos2_y run data get entity @s Pos[1] 1
    execute store result score @s bwe_pos2_z run data get entity @s Pos[2] 1
    # Off-by-one fix: if feet are in air, choose block below
    execute if block ~ ~ ~ #minecraft:air run scoreboard players remove @s bwe_pos2_y 1
    raw!$
    bwe_pos2_set<@s> = 1;
    $!raw
    tellraw @s [{"text":"Pos2 set ","color":"gold"},{"text":"(","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_pos2_x"},"color":"aqua"},{"text":", ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_pos2_y"},"color":"aqua"},{"text":", ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_pos2_z"},"color":"aqua"},{"text":")","color":"dark_gray"}]
    raw!$
}

// =============================
// Bounds, dimensions, and info
// =============================

function betterworldedit:_compute_bounds {
    // Mirror missing positions so dims stay valid
    if $bwe_pos1_set<@s>$ == 0 {
        bwe_pos1_x<@s> = $bwe_pos2_x<@s>$;
        bwe_pos1_y<@s> = $bwe_pos2_y<@s>$;
        bwe_pos1_z<@s> = $bwe_pos2_z<@s>$;
    }
    if $bwe_pos2_set<@s>$ == 0 {
        bwe_pos2_x<@s> = $bwe_pos1_x<@s>$;
        bwe_pos2_y<@s> = $bwe_pos1_y<@s>$;
        bwe_pos2_z<@s> = $bwe_pos1_z<@s>$;
    }

    // X bounds
    if $bwe_pos1_x<@s>$ <= $bwe_pos2_x<@s>$ {
        bwe_min_x<@s> = $bwe_pos1_x<@s>$;
        bwe_max_x<@s> = $bwe_pos2_x<@s>$;
    } else {
        bwe_min_x<@s> = $bwe_pos2_x<@s>$;
        bwe_max_x<@s> = $bwe_pos1_x<@s>$;
    }
    // Y bounds
    if $bwe_pos1_y<@s>$ <= $bwe_pos2_y<@s>$ {
        bwe_min_y<@s> = $bwe_pos1_y<@s>$;
        bwe_max_y<@s> = $bwe_pos2_y<@s>$;
    } else {
        bwe_min_y<@s> = $bwe_pos2_y<@s>$;
        bwe_max_y<@s> = $bwe_pos1_y<@s>$;
    }
    // Z bounds
    if $bwe_pos1_z<@s>$ <= $bwe_pos2_z<@s>$ {
        bwe_min_z<@s> = $bwe_pos1_z<@s>$;
        bwe_max_z<@s> = $bwe_pos2_z<@s>$;
    } else {
        bwe_min_z<@s> = $bwe_pos2_z<@s>$;
        bwe_max_z<@s> = $bwe_pos1_z<@s>$;
    }

    // Dimensions (inclusive)
    $!raw
    scoreboard players operation @s bwe_dim_x = @s bwe_max_x
    scoreboard players operation @s bwe_dim_x -= @s bwe_min_x
    scoreboard players add @s bwe_dim_x 1

    scoreboard players operation @s bwe_dim_y = @s bwe_max_y
    scoreboard players operation @s bwe_dim_y -= @s bwe_min_y
    scoreboard players add @s bwe_dim_y 1

    scoreboard players operation @s bwe_dim_z = @s bwe_max_z
    scoreboard players operation @s bwe_dim_z -= @s bwe_min_z
    scoreboard players add @s bwe_dim_z 1
    raw!$

    // Volume
    $!raw
    scoreboard players operation @s _temp = @s bwe_dim_x
    scoreboard players operation @s _temp *= @s bwe_dim_y
    scoreboard players operation @s bwe_volume = @s _temp
    scoreboard players operation @s bwe_volume *= @s bwe_dim_z
    raw!$
}

function betterworldedit:info {
    exec betterworldedit:_compute_bounds;
    $!raw
    tellraw @s [{"text":"Selection Info","bold":true,"color":"aqua"}]
    tellraw @s [{"text":"Pos1:","color":"gray"},{"text":" (","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_pos1_x"},"color":"aqua"},{"text":", ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_pos1_y"},"color":"aqua"},{"text":", ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_pos1_z"},"color":"aqua"},{"text":")","color":"dark_gray"}]
    tellraw @s [{"text":"Pos2:","color":"gray"},{"text":" (","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_pos2_x"},"color":"aqua"},{"text":", ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_pos2_y"},"color":"aqua"},{"text":", ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_pos2_z"},"color":"aqua"},{"text":")","color":"dark_gray"}]
    tellraw @s [{"text":"Bounds:","color":"gray"},{"text":" min ","color":"dark_gray"},{"text":"(","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_min_x"},"color":"aqua"},{"text":", ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_min_y"},"color":"aqua"},{"text":", ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_min_z"},"color":"aqua"},{"text":") ","color":"dark_gray"},{"text":"max ","color":"dark_gray"},{"text":"(","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_max_x"},"color":"aqua"},{"text":", ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_max_y"},"color":"aqua"},{"text":", ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_max_z"},"color":"aqua"},{"text":")","color":"dark_gray"}]
    tellraw @s [{"text":"Dims:","color":"gray"},{"score":{"name":"@s","objective":"bwe_dim_x"},"color":"aqua"},{"text":" x ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_dim_y"},"color":"aqua"},{"text":" x ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_dim_z"},"color":"aqua"},{"text":" = ","color":"dark_gray"},{"score":{"name":"@s","objective":"bwe_volume"},"color":"yellow"}]
    raw!$
}

// =============================
// Ensure & Tick
// =============================

function betterworldedit:_ensure_scores_for_player {
    $!raw
    # Flags & positions
    scoreboard players add @s bwe_pos1_set 0
    scoreboard players add @s bwe_pos2_set 0
    scoreboard players add @s bwe_pos1_x 0
    scoreboard players add @s bwe_pos1_y 0
    scoreboard players add @s bwe_pos1_z 0
    scoreboard players add @s bwe_pos2_x 0
    scoreboard players add @s bwe_pos2_y 0
    scoreboard players add @s bwe_pos2_z 0

    # Derived
    scoreboard players add @s bwe_min_x 0
    scoreboard players add @s bwe_min_y 0
    scoreboard players add @s bwe_min_z 0
    scoreboard players add @s bwe_max_x 0
    scoreboard players add @s bwe_max_y 0
    scoreboard players add @s bwe_max_z 0
    scoreboard players add @s bwe_dim_x 0
    scoreboard players add @s bwe_dim_y 0
    scoreboard players add @s bwe_dim_z 0
    scoreboard players add @s bwe_volume 0

    # Config (mirror from global at fill start)
    scoreboard players add @s bwe_max_fill 0
    execute store result score @s bwe_max_fill run scoreboard players get @e[type=armor_stand,tag=bwe_global_config,limit=1] bwe_max_fill

    # Scratch
    scoreboard players add @s _slice_h 0
    scoreboard players add @s _base 0
    scoreboard players add @s _slices 0
    scoreboard players add @s _y_start 0
    scoreboard players add @s _y_end 0
    scoreboard players add @s _xs 0
    scoreboard players add @s _xe 0
    scoreboard players add @s _zs 0
    scoreboard players add @s _ze 0
    scoreboard players add @s _tile_x 0
    scoreboard players add @s _tile_z 0
    scoreboard players add @s _area_limit 0
    scoreboard players add @s _temp 0
    scoreboard players add @s _ix 0
    scoreboard players add @s _iy 0
    scoreboard players add @s _iz 0
    scoreboard players add @s _fill_active 0

    # Selector stats
    scoreboard players add @s bwe_stat_selector 0
    scoreboard players add @s bwe_stat_selector_2 0
    scoreboard players add @s bwe_stat_prev_1 0
    scoreboard players add @s bwe_stat_prev_2 0
    raw!$
}

function betterworldedit:main_tick {
    exec betterworldedit:update_selector<@a>;
    exec betterworldedit:process_fill_tick<@a>;
}

on_tick betterworldedit:main_tick;

// =============================
// Chunked fill
// =============================

function betterworldedit:_fill_slice_macro {
    $fill $(x1) $(y1) $(z1) $(x2) $(y2) $(z2) $(block)
}

function betterworldedit:_prepare_fill_ctx {
    $!raw
    # Reset compound
    data remove storage betterworldedit:ctx fill
    data modify storage betterworldedit:ctx fill set value {}
    # Coords from scoreboard
    execute store result storage betterworldedit:ctx fill.x1 int 1 run scoreboard players get @s _xs
    execute store result storage betterworldedit:ctx fill.y1 int 1 run scoreboard players get @s _y_start
    execute store result storage betterworldedit:ctx fill.z1 int 1 run scoreboard players get @s _zs
    execute store result storage betterworldedit:ctx fill.x2 int 1 run scoreboard players get @s _xe
    execute store result storage betterworldedit:ctx fill.y2 int 1 run scoreboard players get @s _y_end
    execute store result storage betterworldedit:ctx fill.z2 int 1 run scoreboard players get @s _ze
    # Block id from request
    data modify storage betterworldedit:ctx fill.block set from storage betterworldedit:ctx req.block
    raw!$
}

function betterworldedit:fill_block {
    // Ensure global config and player score entries only when starting a fill
    exec betterworldedit:_ensure_global_config;
    exec betterworldedit:_ensure_scores_for_player;
    exec betterworldedit:_compute_bounds;
    $!raw
    execute unless data storage betterworldedit:ctx req.block run data modify storage betterworldedit:ctx req.block set value "minecraft:stone"
    raw!$
    if $bwe_volume<@s>$ == 0 {
        $!raw
        tellraw @s [{"text":"No selection set!","color":"red"},{"text":" Use ","color":"gray"},{"text":"pos1","color":"gold"},{"text":"/","color":"dark_gray"},{"text":"pos2","color":"gold"},{"text":" first.","color":"gray"}]
        raw!$
    } else {
        $!raw
        tellraw @s [{"text":"Filling selection with "},{"storage":"betterworldedit:ctx","nbt":"req.block"},{"text":"... ("},{"score":{"name":"@s","objective":"bwe_dim_x"}},{"text":"x"},{"score":{"name":"@s","objective":"bwe_dim_y"}},{"text":"x"},{"score":{"name":"@s","objective":"bwe_dim_z"}},{"text":" = "},{"score":{"name":"@s","objective":"bwe_volume"}},{"text":") max per op="},{"score":{"name":"@s","objective":"bwe_max_fill"}},{"text":")"}]
        raw!$

        // Single fill if within limit
        if $bwe_volume<@s>$ <= $bwe_max_fill<@s>$ {
            $!raw
            scoreboard players operation @s _y_start = @s bwe_min_y
            scoreboard players operation @s _y_end = @s bwe_max_y
            scoreboard players operation @s _xs = @s bwe_min_x
            scoreboard players operation @s _xe = @s bwe_max_x
            scoreboard players operation @s _zs = @s bwe_min_z
            scoreboard players operation @s _ze = @s bwe_max_z
            raw!$
            exec betterworldedit:_prepare_fill_ctx;
            exec betterworldedit:_fill_slice_macro with storage betterworldedit:ctx fill;
            $!raw
            tellraw @s [{"text":"Done","color":"green"},{"text":" (single fill)","color":"gray"}]
            raw!$
        } else {
            // Chunked: precompute tile sizes and schedule per-tick processing
            _base<@s> = $bwe_dim_x<@s>$ * $bwe_dim_z<@s>$;
            _slice_h<@s> = $bwe_max_fill<@s>$ / $_base<@s>$;
            if $_slice_h<@s>$ < 1 { _slice_h<@s> = 1; }
            if $_slice_h<@s>$ > $bwe_dim_y<@s>$ { _slice_h<@s> = $bwe_dim_y<@s>$; }

            // Determine tile sizes along X/Z to respect area_limit per slice
            _area_limit<@s> = $bwe_max_fill<@s>$ / $_slice_h<@s>$;
            if $_area_limit<@s>$ < 1 { _area_limit<@s> = 1; }

            _tile_x<@s> = $_area_limit<@s>$ / $bwe_dim_z<@s>$;
            if $_tile_x<@s>$ < 1 { _tile_x<@s> = 1; }
            if $_tile_x<@s>$ > $bwe_dim_x<@s>$ { _tile_x<@s> = $bwe_dim_x<@s>$; }

            _tile_z<@s> = $_area_limit<@s>$ / $_tile_x<@s>$;
            if $_tile_z<@s>$ < 1 { _tile_z<@s> = 1; }
            if $_tile_z<@s>$ > $bwe_dim_z<@s>$ { _tile_z<@s> = $bwe_dim_z<@s>$; }

            // Initialize indices and activate the per-tick processor
            _ix<@s> = 0;
            _iy<@s> = 0;
            _iz<@s> = 0;
            _slices<@s> = 0;
            _fill_active<@s> = 1;
            $!raw
            tellraw @s [{"text":"Started chunked fill","color":"green"},{"text":"; ","color":"dark_gray"},{"text":"running across ticks...","color":"gray"}]
            raw!$
        }
    }
}

function betterworldedit:process_fill_tick {
    // If a chunked fill is active, process one sub-fill per tick per player
    if $_fill_active<@s>$ == 1 {
        // Compute layer start; finish if beyond bounds
        _y_start<@s> = $bwe_min_y<@s>$ + ($_iy<@s>$ * $_slice_h<@s>$);
        if $_y_start<@s>$ > $bwe_max_y<@s>$ {
            _fill_active<@s> = 0;
            $!raw
            tellraw @s [{"text":"Done ","color":"green"},{"text":"(","color":"dark_gray"},{"score":{"name":"@s","objective":"_slices"},"color":"yellow"},{"text":" sub-fills)","color":"gray"}]
            raw!$
        } else {
            // Compute current row/col starts
            _xs<@s> = $bwe_min_x<@s>$ + ($_ix<@s>$ * $_tile_x<@s>$);
            _zs<@s> = $bwe_min_z<@s>$ + ($_iz<@s>$ * $_tile_z<@s>$);

            // Wrap Z -> X -> Y as needed
            if $_zs<@s>$ > $bwe_max_z<@s>$ {
                _iz<@s> = 0;
                _ix<@s> = $_ix<@s>$ + 1;
                _zs<@s> = $bwe_min_z<@s>$ + ($_iz<@s>$ * $_tile_z<@s>$);
                _xs<@s> = $bwe_min_x<@s>$ + ($_ix<@s>$ * $_tile_x<@s>$);
            }

            if $_xs<@s>$ > $bwe_max_x<@s>$ {
                _ix<@s> = 0;
                _iy<@s> = $_iy<@s>$ + 1;
                _xs<@s> = $bwe_min_x<@s>$ + ($_ix<@s>$ * $_tile_x<@s>$);
                _y_start<@s> = $bwe_min_y<@s>$ + ($_iy<@s>$ * $_slice_h<@s>$);
                if $_y_start<@s>$ > $bwe_max_y<@s>$ {
                    _fill_active<@s> = 0;
                    $!raw
                    tellraw @s [{"text":"Done ","color":"green"},{"text":"(","color":"dark_gray"},{"score":{"name":"@s","objective":"_slices"},"color":"yellow"},{"text":" sub-fills)","color":"gray"}]
                    raw!$
                }
            }

            if $_fill_active<@s>$ == 1 {
                // Compute ends with clamps
                _y_end<@s> = $_y_start<@s>$ + $_slice_h<@s>$ - 1;
                if $_y_end<@s>$ > $bwe_max_y<@s>$ { _y_end<@s> = $bwe_max_y<@s>$; }

                _xe<@s> = $_xs<@s>$ + $_tile_x<@s>$ - 1;
                if $_xe<@s>$ > $bwe_max_x<@s>$ { _xe<@s> = $bwe_max_x<@s>$; }

                _ze<@s> = $_zs<@s>$ + $_tile_z<@s>$ - 1;
                if $_ze<@s>$ > $bwe_max_z<@s>$ { _ze<@s> = $bwe_max_z<@s>$; }

                // Execute one sub-fill
                exec betterworldedit:_prepare_fill_ctx;
                exec betterworldedit:_fill_slice_macro with storage betterworldedit:ctx fill;

                _slices<@s> = $_slices<@s>$ + 1;
                _iz<@s> = $_iz<@s>$ + 1;
            }
        }
    }
}

// Public macro: set requested block (string) and run chunked fill over current selection
// Usage examples:
//   exec betterworldedit:fill_selection '{block:"minecraft:oak_planks"}';
//   exec betterworldedit:fill_selection with storage betterworldedit:req mypath.to.compound;
function betterworldedit:fill_selection {
    $!rawdata remove storage betterworldedit:ctx req
data modify storage betterworldedit:ctx req set value {}
data modify storage betterworldedit:ctx req.block set value "$(block)"raw!$
    exec betterworldedit:fill_block;
}

// Set the global max sub-fill size easily via storage argument: {value:NUMBER}
// Usage:
//   exec betterworldedit:set_max_fill '{value:50000}';
//   exec betterworldedit:set_max_fill with storage betterworldedit:req mypath.to.compound;
function betterworldedit:set_max_fill {
    exec betterworldedit:_ensure_global_config;
    $!raw
    scoreboard players set @e[type=armor_stand,tag=bwe_global_config,limit=1] bwe_max_fill $(value)
    tellraw @s [{"text":"Global max per sub-fill set to ","color":"gray"},{"score":{"name":"@e[type=armor_stand,tag=bwe_global_config,limit=1]","objective":"bwe_max_fill"},"color":"yellow"}]
    raw!$
}

// =============================
// Selector tools
// =============================

function betterworldedit:give_selector {
    $!raw
    give @s minecraft:brush[item_name={"bold":true,"color":"dark_blue","italic":true,"text":"BWE Selector (Pos1)"},lore=[{"text":"Right-click: set pos1","color":"gray","italic":false}],custom_data={bwe_selector_1:1b}] 1
    give @s minecraft:brush[item_name={"bold":true,"color":"gold","italic":true,"text":"BWE Selector (Pos2)"},lore=[{"text":"Right-click: set pos2","color":"gray","italic":false}],custom_data={bwe_selector_2:1b}] 1
    raw!$
    $!raw
    tellraw @s [{"text":"Gave you ","color":"gray"},{"text":"BWE Selector","color":"aqua","bold":true},{"text":" tools (pos1 & pos2)","color":"gray"}]
    raw!$
}

function betterworldedit:update_selector {
    // Update tags based on currently held selector tool
    $!raw
    tag @s remove bwe_holding_pos1
    tag @s remove bwe_holding_pos2
    execute if entity @s[nbt={SelectedItem:{components:{"minecraft:custom_data":{bwe_selector_1:1b}}}}] run tag @s add bwe_holding_pos1
    execute if entity @s[nbt={SelectedItem:{components:{"minecraft:custom_data":{bwe_selector_2:1b}}}}] run tag @s add bwe_holding_pos2
    raw!$

    // On brush use, run the appropriate function for whoever holds that tool, then reset the stat
    $!raw
    execute as @s[tag=bwe_holding_pos1,scores={bwe_use_selector=1..}] run function betterworldedit:pos1
    execute as @s[tag=bwe_holding_pos2,scores={bwe_use_selector=1..}] run function betterworldedit:pos2
    scoreboard players reset @s[scores={bwe_use_selector=1..}] bwe_use_selector
    raw!$
}
